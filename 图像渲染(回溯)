733. 图像渲染
有一幅以二维整数数组表示的图画，每一个整数表示该图画的像素值大小，数值在 0 到 65535 之间。

给你一个坐标 (sr, sc) 表示图像渲染开始的像素值（行 ，列）和一个新的颜色值 newColor，让你重新上色这幅图像。

为了完成上色工作，从初始坐标开始，记录初始坐标的上下左右四个方向上像素值与初始坐标相同的相连像素点，接着再记录这四个方向上符合条件的像素点与他们对应四个方向上像素值与初始坐标相同的相连像素点，……，重复该过程。将所有有记录的像素点的颜色值改为新的颜色值。

最后返回经过上色渲染后的图像。

示例 1:

输入: 
image = [[1,1,1],[1,1,0],[1,0,1]]
sr = 1, sc = 1, newColor = 2
输出: [[2,2,2],[2,2,0],[2,0,1]]
解析: 
在图像的正中间，(坐标(sr,sc)=(1,1)),
在路径上所有符合条件的像素点的颜色都被更改成2。
注意，右下角的像素没有更改为2，
因为它不是在上下左右四个方向上与初始点相连的像素点。
class Solution {
public:
    void DFS(vector<vector<int>>& image,vector<vector<int>>& books,
int row,int col,int sr, int sc,int oldColor, int newColor)
    {
        int moblie[4][2] = {{1,0},{-1,0},{0,1},{0,-1}};
        //处理当前位置
        image[sr][sc] = newColor;
        books[sr][sc] = 1;
        //处理和当前位置相关的前后左右节点
        for(int i = 0;i < 4;i++)
        {
            int newsr = sr + moblie[i][0];
            int newsc = sc + moblie[i][1];
            //判断新位置是否越界
            if(newsr >= row || newsr < 0 ||
               newsc >= col || newsc < 0)
            {
                continue;//结束当前次的循环
            }
            //处理新位置
            if(image[newsr][newsc] == oldColor &&
            books[newsr][newsc] == 0)
            {
                DFS(image,books,row,col,newsr,newsc,oldColor,newColor);
            }
        }
    }
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        if(image.empty())
        {
            return image;
        }
        int row = image.size();
        int col = image[0].size();
        //开一个标记数组
        vector<vector<int>> books(row,vector<int>(col,0));
        //获取旧颜色
        int oldColor = image[sr][sc];
        //回溯
        DFS(image,books,row,col,sr,sc,oldColor,newColor);
        return image;
    }
};
