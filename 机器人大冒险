机器人大冒险

力扣团队买了一个可编程机器人，机器人初始位置在原点(0, 0)。小伙伴事先给机器人输入一串指令command，机器人就会无限循环这条指令的步骤进行移动。指令有两种：

U: 向y轴正方向移动一格
R: 向x轴正方向移动一格。
不幸的是，在 xy 平面上还有一些障碍物，他们的坐标用obstacles表示。机器人一旦碰到障碍物就会被损毁。

给定终点坐标(x, y)，返回机器人能否完好地到达终点。如果能，返回true；否则返回false。

 

示例 1：

输入：command = "URR", obstacles = [], x = 3, y = 2
输出：true
解释：U(0, 1) -> R(1, 1) -> R(2, 1) -> U(2, 2) -> R(3, 2)。
示例 2：

输入：command = "URR", obstacles = [[2, 2]], x = 3, y = 2
输出：false
解释：机器人在到达终点前会碰到(2, 2)的障碍物。
示例 3：

输入：command = "URR", obstacles = [[4, 2]], x = 3, y = 2
输出：true
解释：到达终点后，再碰到障碍物也不影响返回结果。
class Solution {
public:
    int min(int x, int y){
        return x < y ? x : y;
    }
    bool judge(string command, int x_num, int y_num, int x, int y){
        int temp = min(x/x_num, y/y_num);       //temp记录最小公倍数
        x = x - x_num*temp;      //x记录的是R
        y = y - y_num*temp;      //y记录的是U
        //此时的x和y代表终点相对于第一次循环的位置
        if(x == 0 && y == 0) return true;
        else{
            int len_cmd = command.size();
            for(int i = 0; i < len_cmd; i++){
                if(command[i] == 'U'){
                    y--;
                    if(y < 0) return false;
                }else{
                    x--;
                    if(x < 0) return false;
                }
                if(x == 0 && y == 0) return true;
            }
        }
        return true;
    }
    bool robot(string command, vector<vector<int>>& obstacles, int x, int y) {
        int len_cmd = command.size();
        int x_1 = 0;
        int y_1 = 0;
        //统计第一轮循环能走到的地方
        for(int i = 0; i < len_cmd; i++){
            if(command[i] == 'R'){
                x_1++;
            }else{
                y_1++;
            }
        }
        //把每一个障碍点（该障碍点的x和y都要小于终点的x和y）当做是终点求能否到达 能到达则return false
        int len_obs = obstacles.size();
        for(int i = 0; i < len_obs; i++){
            if(obstacles[i][0] <= x && obstacles[i][1] <= y){
                //能到达则return false
                if(judge(command, x_1, y_1, obstacles[i][0], obstacles[i][1]) == true) return false;
            }
        }
        //如果所有的终点之内的障碍点都不会到达 则直接判断终点是否可以到达
        if(judge(command, x_1, y_1, x, y) == true) return true;
        else return false;
    }
};
